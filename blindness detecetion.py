{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71cf9b6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import numpy as np\n",
    "import cv2\n",
    "\n",
    "\n",
    "face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n",
    "eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_eye_tree_eyeglasses.xml')\n",
    "\n",
    "\n",
    "first_read = True\n",
    "\n",
    "\n",
    "cap = cv2.VideoCapture(0)\n",
    "\n",
    "while True:\n",
    "    ret, img = cap.read()\n",
    "\n",
    "  \n",
    "    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n",
    "\n",
    "   \n",
    "    gray = cv2.bilateralFilter(gray, 5, 1, 1)\n",
    "\n",
    "   \n",
    "    faces = face_cascade.detectMultiScale(gray, 1.3, 5, minSize=(200, 200))\n",
    "\n",
    "    if len(faces) > 0:\n",
    "        for (x, y, w, h) in faces:\n",
    "            img = cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 2)\n",
    "\n",
    "            \n",
    "            roi_face = gray[y:y + h, x:x + w]\n",
    "            roi_face_clr = img[y:y + h, x:x + w]\n",
    "\n",
    "            eyes = eye_cascade.detectMultiScale(roi_face, 1.3, 5, minSize=(50, 50))\n",
    "\n",
    "           \n",
    "            if len(eyes) >= 2:\n",
    "               \n",
    "                if first_read:\n",
    "                    cv2.putText(img, \"Eyes detected. Press 's' to begin\", (70, 70),\n",
    "                                cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 2)\n",
    "                else:\n",
    "                    cv2.putText(img, \"Eyes open!\", (70, 70),\n",
    "                                cv2.FONT_HERSHEY_PLAIN, 2, (255, 255, 255), 2)\n",
    "            else:\n",
    "                if first_read:\n",
    "                    \n",
    "                    cv2.putText(img, \"No eyes detected\", (70, 70),\n",
    "                                cv2.FONT_HERSHEY_PLAIN, 3, (0, 0, 255), 2)\n",
    "                else:\n",
    "                   \n",
    "                    print(\"Blink detected--------------\")\n",
    "                    cv2.waitKey(3000)\n",
    "                    first_read = True\n",
    "    else:\n",
    "        cv2.putText(img, \"No face detected\", (100, 100),\n",
    "                    cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 2)\n",
    "\n",
    "   \n",
    "    cv2.imshow('img', img)\n",
    "    a = cv2.waitKey(1)\n",
    "\n",
    "    if a == ord('q'):\n",
    "        break\n",
    "    elif a == ord('s') and first_read:\n",
    "      \n",
    "        first_read = False\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
